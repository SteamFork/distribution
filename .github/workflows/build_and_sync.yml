name: Automated Package Build and Sync

on:
  workflow_dispatch:

jobs:
  build_and_sync:
    timeout-minutes: 1440
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false

      - name: Cache GPG key
        id: gpg-key
        uses: actions/cache@v3
        with:
          path: ~/.gnupg
          key: ${{ runner.os }}-gpg-key
          restore-keys: |
            ${{ runner.os }}-gpg-key

      - name: Verify GPG key
        run: |
          if [ ! -f ~/.gnupg/private.key ]; then
            echo "GPG key not found in cache"
            exit 1
          fi

      - name: Cache SSH key
        id: ssh-key
        uses: actions/cache@v3
        with:
          path: ~/.ssh
          key: ${{ runner.os }}-ssh-key
          restore-keys: |
            ${{ runner.os }}-ssh-key

      - name: Configure ccache
        run: |
          ccache --max-size=50G

      - name: Import GPG key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import --passphrase ${{ secrets.GPG_PASSPHRASE }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Cache imported GPG key
        run: |
          gpg --export-secret-keys --armor ${{ secrets.GPG_KEY_ID }} > /tmp/private.key
          mkdir -p ~/.gnupg
          cp /tmp/private.key ~/.gnupg/private.key
          rm /tmp/private.key

      - name: Set GPG trust level
        run: |
          echo "${{ secrets.GPG_KEY_ID }}:5:" | gpg --batch --yes --import-ownertrust

      - name: Trust GPG key for pacman
        run: |
          sudo pacman-key --init
          sudo pacman-key --add ~/.gnupg/private.key
          sudo pacman-key --lsign-key ${{ secrets.GPG_KEY_ID }}
          sudo pacman-key --populate steamfork
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Clear pacman cache
        run: |
          sudo pacman -Scc --noconfirm

      - name: Run checksum_pkgbuild script
        id: checksum
        run: |
          OUTPUT=$(./scripts/checksum_pkgbuild.sh)
          echo "::set-output name=packages::$OUTPUT"

      - name: Build with dependencies
        run: |
          PACKAGES="${{ steps.checksum.outputs.packages }}"
          IFS=' ' read -r -a PACKAGE_ARRAY <<< "$PACKAGES"
          for PKG in "${PACKAGE_ARRAY[@]}"; do
            ./scripts/build_with_dependencies "$PKG"
          done

#      - name: Sync packages
#        run: make packages-sync

#      - name: Sync mirrors
#        run: make mirrors-sync
