#!/bin/bash

if [[ $EUID -ne 0 ]]; then
    exec pkexec --disable-internal-agent "$0" "$@"
fi

function show_help() {
    cat <<EOF
SteamFork Installer

Options:
  --drive            ...  Specify the disk for installation.
  --username         ...  Non-root user to create during installation.
  --password         ...  The password to configure for the non-root user account.
  --root_password    ...  The password to configure for the root account.
  --use_unallocated  ...  Use unallocated space on target disk instead of the full disk. (25GB minimum required)
  --mode             ...  Specify the mode for installation (gamescope or desktop).

Ex.
  steamfork-installer --drive sda --username deck --password deck --root_password deck --mode gamescope

EOF
}

function log_progress() {
    local percentage=$1
    local message=$2
    echo "${percentage}%: ${message}"
}

function run_command() {
    local cmd=$1
    local percentage=$2
    local message=$3

    log_progress "${percentage}" "${message}"
    eval "${cmd}"
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log_progress "100" "Error ${exit_code} at step: ${message}. Installation Failed..."
        exit 1
    fi
}

if [ ! "$#" -gt 0 ]; then
    show_help
    exit 1
fi

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --drive)
        DEVICE="$2"
        shift # past argument
        shift # past value
        ;;
        --username)
        OSUSER="$2"
        shift # past argument
        shift # past value
        ;;
        --password)
        OSPASS="$2"
        shift # past argument
        shift # past value
        ;;
        --root_password)
        ROOTPASS="$2"
        shift # past argument
        shift # past value
        ;;
        --use_unallocated)
        USE_UNALLOCATED=true
        shift # past argument
        ;;
        --mode)
        MODE="$2"
        shift # past argument
        shift # past value
        ;;
        *)    # unknown option
        echo -e "Unknown option: $1\n"
        show_help
        exit 1
        ;;
    esac
done

ROOTLOCATION=/tmp/sf_root
INSTALLLOCATION=${ROOTLOCATION}/rootfs
HOMELOCATION_TEMP=/tmp/sf_home
SNAPSHOT_FUTURELOC=${HOMELOCATION_TEMP}/.steamos/installcontainer
SUBVOL=$(ls /etc/install.image/*.img.zst | sed -s 's/.img.zst//g')
SUBVOL=$(basename ${SUBVOL})
SUBVOLLOCATION=/tmp/subvol

echo ${DEVICE} | grep '^/dev' >/dev/null || DEVICE="/dev/${DEVICE}"

INSTALLDEVICE="${DEVICE}"

echo ${DEVICE} | grep -q -P "^/dev/(nvme|loop|mmcblk)"
if [ $? -eq 0 ]; then
    INSTALLDEVICE="${DEVICE}p"
fi

log_progress 1 "Creating partitions..."

# Check if there are any partitions on the target device
existing_partitions=$(lsblk -n -o NAME ${DEVICE} | grep -v "^$(basename ${DEVICE})$")
if [ -n "$existing_partitions" ]; then
    # Check if the device is mounted anywhere
    mounted_partitions=$(grep "^/dev/$(basename ${DEVICE})" /proc/mounts | awk '{print $1}' | sort -r)
    if [ -n "$mounted_partitions" ]; then
        # Safely unmount all mounted partitions on the target device in reverse order
        for part in $mounted_partitions; do
            run_command "umount $part 2>/dev/null" 2 "Unmounting $part..."
            sleep 1
            # If still mounted, print an error message
            if mountpoint -q $part 2>/dev/null; then
                log_progress 2 "Failed to unmount $part. Please unmount it manually and try again."
                exit 1
            fi
        done
    else
        log_progress 2 "No mounted partitions found on ${DEVICE}"
    fi
else
    log_progress 2 "No partitions found on ${DEVICE}"
fi

# Default partition sizes in MiB
EFI_SIZE=${EFI_SIZE:-256}     # 256 MiB
ROOT_SIZE=${ROOT_SIZE:-20480} # 20 GiB
VAR_SIZE=${VAR_SIZE:-1024}    # 1 GiB
HOME_SIZE=${HOME_SIZE:-100%}  # We'll use all remaining space by default.

# Function to convert size in MiB to the number of sectors
function mib_to_sectors() {
    local SIZE_MIB=$1
    echo $((SIZE_MIB * 2048))
}

# Get the kernel parameters for the block device
OPTIMAL_IO_SIZE=$(cat /sys/block/$(basename ${DEVICE})/queue/optimal_io_size)
ALIGNMENT_OFFSET=$(cat /sys/block/$(basename ${DEVICE})/alignment_offset)
PHYSICAL_BLOCK_SIZE=$(cat /sys/block/$(basename ${DEVICE})/queue/physical_block_size)

# Calculate the alignment start based on the kernel parameters
ALIGNED_START=$(( (ALIGNMENT_OFFSET + OPTIMAL_IO_SIZE) / PHYSICAL_BLOCK_SIZE ))

# Get the size of the disk
DISK_SIZE=$(cat /sys/block/$(basename ${DEVICE})/size)

log_progress 6 "Found largest free space of ${ALIGNED_START} sectors"

if [ "${USE_UNALLOCATED}" = true ]; then
    # Clean up any existing SteamFork partitions to avoid conflicts
    # SteamFork cannot be installed multiple times on the same disk
    EXISTING_PARTITIONS=$(lsblk -o NAME,LABEL,PARTLABEL -ln | grep sf_ | awk '{print $1}')
    if [ -n "${EXISTING_PARTITIONS}" ]; then
        for PART in ${EXISTING_PARTITIONS}; do
            # Get the partition number to delete
            if [[ ${PART} =~ ([0-9]+)$ ]]; then
                PART_NUM=${BASH_REMATCH[1]}
                run_command "sgdisk ${DEVICE} --delete=${PART_NUM}" 5 "Deleting partition ${PART_NUM} from ${DEVICE}..."
            fi
        done
    else
        log_progress 5 "No existing SteamFork partitions found."
    fi

    # Find the start of the largest free space and align to 1MB
    ALIGNED_FREE=$(parted -s ${DEVICE} unit MB print free | awk '/Free Space/ {print $1}' | sort -nk1 | tail -1 | tr -d 'MB')
    log_progress 6 "Found largest free space of ${ALIGNED_FREE}"

    log_progress 7 "Creating partitions in unallocated space..."

    EFI_START=$((ALIGNED_START + ALIGNED_FREE))
    EFI_END=$((EFI_START + $(mib_to_sectors ${EFI_SIZE}) - 1))
    run_command "parted -s -a min ${DEVICE} unit s mkpart sf_efi fat32 ${EFI_START}s ${EFI_END}s" 8 "Creating EFI partition"

    ROOT_START=$((EFI_END + 1))
    ROOT_END=$((ROOT_START + $(mib_to_sectors ${ROOT_SIZE}) - 1))
    run_command "parted -s -a min ${DEVICE} unit s mkpart sf_root btrfs ${ROOT_START}s ${ROOT_END}s" 9 "Creating root partition"

    VAR_START=$((ROOT_END + 1))
    VAR_END=$((VAR_START + $(mib_to_sectors ${VAR_SIZE}) - 1))
    run_command "parted -s -a min ${DEVICE} unit s mkpart sf_var ext4 ${VAR_START}s ${VAR_END}s" 10 "Creating var partition"

    HOME_START=$((VAR_END + 1))
    HOME_END=${DISK_SIZE}
    run_command "parted -s -a min ${DEVICE} unit s mkpart sf_home ext4 ${HOME_START}s ${HOME_SIZE}" 11 "Creating home partition"

    EFI_PART_NUM=$(parted -s ${DEVICE} print | grep sf_efi | awk '{print $1}')
    run_command "parted -s ${DEVICE} set ${EFI_PART_NUM} boot on" 12 "Setting boot flag on EFI partition"
    run_command "parted -s ${DEVICE} set ${EFI_PART_NUM} esp on" 13 "Setting ESP flag on EFI partition"
    
    run_command "sync && partprobe ${DEVICE}" 14 "Syncing and probing device"

    EFI_PARTITION=$(lsblk -o NAME,LABEL,PARTLABEL -ln | grep sf_efi | awk '{print $1}')
    ROOT_PARTITION=$(lsblk -o NAME,LABEL,PARTLABEL -ln | grep sf_root | awk '{print $1}')
    VAR_PARTITION=$(lsblk -o NAME,LABEL,PARTLABEL -ln | grep sf_var | awk '{print $1}')
    HOME_PARTITION=$(lsblk -o NAME,LABEL,PARTLABEL -ln | grep sf_home | awk '{print $1}')

    log_progress 15 "Formatting partitions..."
    run_command "mkfs -t vfat /dev/${EFI_PARTITION}" 16 "Formatting EFI partition"
    run_command "fatlabel /dev/${EFI_PARTITION} sf_efi" 17 "Labeling EFI partition"
    run_command "mkfs -t btrfs -f /dev/${ROOT_PARTITION}" 18 "Formatting root partition"
    run_command "btrfs filesystem label /dev/${ROOT_PARTITION} sf_root" 19 "Labeling root partition"
    run_command "mkfs.ext4 -F /dev/${VAR_PARTITION}" 20 "Formatting var partition"
    run_command "e2label /dev/${VAR_PARTITION} sf_var" 21 "Labeling var partition"
    run_command "mkfs.ext4 -F /dev/${HOME_PARTITION}" 22 "Formatting home partition"
    run_command "e2label /dev/${HOME_PARTITION} sf_home" 23 "Labeling home partition"
else
    # Full disk installation
    EXISTING_PARTITIONS=$(lsblk -n -o NAME ${DEVICE} | grep -v "^$(basename ${DEVICE})$")
    if [ -n "${EXISTING_PARTITIONS}" ]; then
        run_command "sfdisk --delete ${DEVICE}" 5 "Deleting existing partitions"
    else
        log_progress 5 "No existing partitions found on ${DEVICE}"
    fi
    run_command "wipefs -a ${DEVICE}" 6 "Wiping filesystem signatures"
    run_command "yes | parted ${DEVICE} mklabel gpt" 7 "Creating GPT partition table"

    log_progress 8 "Creating partitions on full disk..."

    EFI_START=${ALIGNED_START}
    EFI_END=$((EFI_START + $(mib_to_sectors ${EFI_SIZE}) - 1))
    run_command "parted -s -a min ${DEVICE} unit s mkpart primary fat32 ${EFI_START}s ${EFI_END}s" 9 "Creating EFI partition"

    ROOT_START=$((EFI_END + 1))
    ROOT_END=$((ROOT_START + $(mib_to_sectors ${ROOT_SIZE}) - 1))
    run_command "parted -s -a min ${DEVICE} unit s mkpart primary btrfs ${ROOT_START}s ${ROOT_END}s" 12 "Creating root partition"

    VAR_START=$((ROOT_END + 1))
    VAR_END=$((VAR_START + $(mib_to_sectors ${VAR_SIZE}) - 1))
    run_command "parted -s -a min ${DEVICE} unit s mkpart primary ext4 ${VAR_START}s ${VAR_END}s" 13 "Creating var partition"

    HOME_START=$((VAR_END + 1))
    HOME_END=${DISK_SIZE}
    run_command "parted -s -a min ${DEVICE} unit s mkpart primary ext4 ${HOME_START}s ${HOME_SIZE}" 14 "Creating home partition"

    EFI_PART_NUM=$(parted -s ${DEVICE} print | grep primary | awk 'NR==1{print $1}')
    run_command "parted -s ${DEVICE} set ${EFI_PART_NUM} boot on" 10 "Setting boot flag on EFI partition"
    run_command "parted -s ${DEVICE} set ${EFI_PART_NUM} esp on" 11 "Setting ESP flag on EFI partition"

    ROOT_PARTITION="${INSTALLDEVICE}2"
    VAR_PARTITION="${INSTALLDEVICE}3"
    HOME_PARTITION="${INSTALLDEVICE}4"
    run_command "mkfs -t vfat ${INSTALLDEVICE}1" 15 "Formatting EFI partition"
    run_command "fatlabel ${INSTALLDEVICE}1 sf_efi" 16 "Labeling EFI partition"
    run_command "mkfs -t btrfs -f ${ROOT_PARTITION}" 17 "Formatting root partition"
    run_command "btrfs filesystem label ${ROOT_PARTITION} sf_root" 18 "Labeling root partition"
    run_command "mkfs.ext4 -F ${VAR_PARTITION}" 19 "Formatting var partition"
    run_command "e2label ${VAR_PARTITION} sf_var" 20 "Labeling var partition"
    run_command "mkfs.ext4 -F ${HOME_PARTITION}" 21 "Formatting home partition"
    run_command "e2label ${HOME_PARTITION} sf_home" 22 "Labeling home partition"
fi

run_command "sync && partprobe ${DEVICE}" 24 "Syncing and probing device"
log_progress 25 "Starting to bootstrap installation..."
run_command "steamfork-bootstrap --username \"${OSUSER}\" --password \"${OSPASS}\" --root_password \"${ROOTPASS}\" --mode \"${MODE}\"" 25 "Bootstrapping installation"
sync