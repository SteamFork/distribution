#
# Maintainer: Fewtarius <fewtarius@jelos.org>
#
# Based on the linux package by:
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>
#             Mikael Eriksson <mikael_eriksson@miffe.org>

pkgbase=linux
pkgver=6.13.4
pkgrel=2
pkgdesc="Linux Stable"
arch=(x86_64)
url="https://kernel.org/"
license=(GPL-2.0-only)

ayaneo_platform="v0.3.4"
ayn_platform="v0.5.2"
hid_msi_claw="20240922"

makedepends=(
  bc
  cpio
  gettext
  git
  libelf
  pahole
  perl
  python
  rust
  rust-bindgen
  rust-src

  tar
  xz

  graphviz
  imagemagick
  python-sphinx
  python-yaml
)
options=(
  !strip
  !debug
)
_srcname=linux-${pkgver}
source=(
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/${_srcname}.tar.xz"
  config         # the main kernel config file
  0001-drm-panel-orientation-quirks.patch
  0002-drm-amdgpu-always-allocate-cleared-VRAM-for-GEM-allo.patch
  0006-Ayaneo-geek-headset-patch.patch
  0007-ayaneo-2-headphone-fix.patch
  0008-ayaneo-1s-hp-fix.patch
  0010-enable-flip-ds-bottom-touchscreen.patch
  0012-HACK-add-KConfig-to-enable-driver-specific-color-mgm.patch
  0013-Don-t-create-color_mgmt_properties-on-asics-SIENNA_C.patch
  0020-add-devices-to-oxp-sensors.patch
  0031-IIO-add-aya-neo-tablet-identifier.patch
  0032-iio-imu-Add-driver-for-Bosch-BMI260-IMU.patch
  0033-bmi260-6.13.patch
  0033-Codec-Add-aw87xxx-codec-with-partial-acpi-implementa.patch
  0034-Updated-AW87xxx-driver-to-be-more-verbose-for-debugg.patch
  0036-Updated-AW87xxx-driver-to-automatically-enumerate-a-.patch
  0037-Updated-AW87xxx-driver-to-implement-Suspend-and-Resu.patch
  0038-fixup-aw87xx-warnings.patch
  0040-vcs-amdgpu-quirks.patch
  0041-air-amdgpu-quirks.patch
  0051-drm-amd-display-let-update_planes_and_stream_state-d.patch
  0060-asus-patch-series.patch
  0066-ASoC-acp-Support-microphone-from-Lenovo-Go-S.patch
  0070-lexar-nvme-broken-msi.patch
  0080-vblank-not-passed-vfp.patch
  0081-revert-some-vrr-always-on-hack.patch
  0099-add-external-device-drivers.patch
  0100-ayaneo-platform.patch
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  'A2FF3A36AAA56654109064AB19802F8B0D70FC30'  # Jan Alexander Steffens (heftig)
)
sha256sums=('SKIP'
  'cf7eb7732cfb8707ba78994a68949cee0e925e11c14d9cbea0dc7484eab17ec5' # config
  'e40db9de280c70d83832cdd0768348de170005cdd3ba233b498db5f81dd24fa1' # 0001-drm-panel-orientation-quirks.patch
  '71d093c5c95d7bd594dd8dcd804eabe2f6b95398c519ded42b7d8994f384e4d8' # 0002-drm-amdgpu-always-allocate-cleared-VRAM-for-GEM-allo.patch
  '02f5eaede065b7d68ccf469c9f54eab3ce3f0d852624a3430d83bcd6e2bd7dbb' # 0006-Ayaneo-geek-headset-patch.patch
  '3805f3b8b39d9d49586fb5d2a445a9ee54cf00cd1cdedd226e727420196cc568' # 0007-ayaneo-2-headphone-fix.patch
  'a5fc093f55a43295e08bb70df91d1b0861f2fbd76cee2cf9725b52f3f8d0c4a7' # 0008-ayaneo-1s-hp-fix.patch
  'bb5dd08ae830b11a0170014a7b855bd4224fb5f83b0a8fb7a166d702e63d4e36' # 0010-enable-flip-ds-bottom-touchscreen.patch
  'f45ba5d7dbc004474314c9e0329014e8c9d6b111f1e00397b1072b1bde581761' # 0012-HACK-add-KConfig-to-enable-driver-specific-color-mgm.patch
  '683128d044f4df12dcb0a7b2858075f510d870460dc71f0d60f69df89cf62419' # 0013-Don-t-create-color_mgmt_properties-on-asics-SIENNA_C.patch
  '783178f81727fcec0ff37b279a32c59b6c71702d18e53e472cdf1ee0a23d5241' # 0020-add-devices-to-oxp-sensors.patch
  'd4bc9044e7e3290d6885d08b8360b61744dc4227a723aa178f9041284e062f08' # 0031-IIO-add-aya-neo-tablet-identifier.patch
  '889344264898db71763a5104e36dc6b12c19e24ac85cff0935f923b8b0f63657' # 0032-iio-imu-Add-driver-for-Bosch-BMI260-IMU.patch
  '57df094896a11feb438b3291b8ca10ba2fd95dd724eebfe06dac97a28559e206' # 0033-bmi260-6.13.patch
  '5508dedc920022b728489eb3ebbf7235fe48a7822d3c654cd678388c743442b9' # 0033-Codec-Add-aw87xxx-codec-with-partial-acpi-implementa.patch
  'a1b744c20d676e248b2da55abf5314c533cf98ec2bcf0b9b008dedfe4ebfb9ef' # 0034-Updated-AW87xxx-driver-to-be-more-verbose-for-debugg.patch
  '73a88310ac0077bedd4a4e49689c06cb8460c55774cea1395d90f9ac57252e8c' # 0036-Updated-AW87xxx-driver-to-automatically-enumerate-a-.patch
  '4f3baa6a367659341873ec7443d6238044cca521e04c0a868322221ac50149ff' # 0037-Updated-AW87xxx-driver-to-implement-Suspend-and-Resu.patch
  '23d91695bf8e5d5cdb9503a47468c6c5cf220bc7966a4720aa46645357e29ee6' # 0038-fixup-aw87xx-warnings.patch
  '93087d9449f994dca23c1d5a32919204d31afecc63950d74a2ea41aaa1e3a9ec' # 0040-vcs-amdgpu-quirks.patch
  'ab8a6dccf67cee7d924ee2e3d4690285d404bcb9bab70eced09b05fa2853b288' # 0041-air-amdgpu-quirks.patch
  '7c7df8d4427c807e2cea0f1e147efcdfb1e7c1c5271823cc6bb49f10b1846d19' # 0051-drm-amd-display-let-update_planes_and_stream_state-d.patch
  '8ad995e61face4f0cd8eb4403d099d7b70524efebca008ea185c3fd24ab3ea26' # 0060-asus-patch-series.patch
  'b2c0775ca7f7e8aed633c056b450c972020d37508d391732d7becded53a2210b' # 0066-ASoC-acp-Support-microphone-from-Lenovo-Go-S.patch
  'b048068eeee69bf0f600d2ea390c8f681f9708776ff45a4b871e1e51136af33a' # 0070-lexar-nvme-broken-msi.patch
  'a0688b117326017a36d5df63ea771733ef688027ca0a17e290f88b906141ed9c' # 0080-vblank-not-passed-vfp.patch
  '9abba3bd4c5540d5453abb2cd77edeb55b7bc36650f3dc2f71ae3901466b0756' # 0081-revert-some-vrr-always-on-hack.patch
  '3b1dabc168e4884c6586720538014d6ef8955a0b783d6436dd4937af6622ee42' # 0099-add-external-device-drivers.patch
  '67cbe650db915155351c33f5c135e21fff70f914be947817a11838861e2fa736' # 0100-ayaneo-platform.patch
)

export KBUILD_BUILD_HOST=$(hostnamectl hostname)
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

_make() {
  test -s version
  make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
  cd ${_srcname}/drivers
  git -c advice.detachedHead=false clone -b $ayaneo_platform --depth=1 https://github.com/ShadowBlip/ayaneo-platform.git
  git -c advice.detachedHead=false clone -b $ayn_platform --depth=1 https://github.com/ShadowBlip/ayn-platform.git
  git -c advice.detachedHead=false clone -b $hid_msi_claw --depth=1 https://github.com/SteamFork/hid-msi-claw.git
  cd ..

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname
  make defconfig
  make -s kernelrelease > version
  make mrproper

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config
  _make olddefconfig
  diff -u ../config .config || :

  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  _make -j $(nproc) all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    KSMBD-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(_make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build and source links
  rm -f "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=(
  "$pkgbase"
  "$pkgbase-headers"
)
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
