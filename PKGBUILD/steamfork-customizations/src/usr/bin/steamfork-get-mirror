#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2024-present Fewtarius

STAGING_MIRRORLIST="/tmp/steamfork-mirrors.txt"
LATEST_MIRRORLIST="/etc/default/steamfork-mirrors"
DEFAULT_MIRRORS=( "www.steamfork.org" "www1.ny.steamfork.org" "www1.da.steamfork.org" "www1.sj.steamfork.org" "www1..as.steamfork.org" "www1..as.steamfork.org" )

CURL_OPTS="--retry 1 --retry-all-errors --retry-delay 1 --connect-timeout 2 --max-time 2"
SYNC_FILE=".sync.txt"

### Enable logging
case $(steamfork-get-setting system.loglevel) in
	verbose)
		VERBOSE=true
		;;
	debug)
		VERBOSE=true
		DEBUG=true
		;;
	*)
		VERBOSE=false
		DEBUG=false
		;;
esac

function refresh_mirrors() {
	declare -a ACTIVE_MIRRORS FASTEST_MIRRORS

	for MIRROR in ${DEFAULT_MIRRORS[@]}
	do
		$VERBOSE && echo "Fetch mirror list from: ${MIRROR}"
		curl -Lo ${STAGING_MIRRORLIST} ${CURL_OPTS} https://${MIRROR}/mirrorlist.txt 2>/dev/null
		if [ "$?" = "0" ]
		then
			$VERBOSE && echo "Fetch OK."
			### Grab the mirror checksum from the primary instance
			PRIMARY_HASH_FN=$(uuidgen)
			$VERBOSE && echo "Fetch primary hash from ${MIRROR}"
			curl -Lo /tmp/${PRIMARY_HASH_FN} -H 'Cache-Control: no-cache' ${CURL_OPTS} "https://${MIRROR}/${SYNC_FILE}" 2>/dev/null
			PRIMARY_HASH=$(cat /tmp/${PRIMARY_HASH_FN})
			$VERBOSE && echo "PRIMARY_HASH: ${PRIMARY_HASH}"
			rm -f /tmp/${PRIMARY_HASH_FN} 2>/dev/null
			break
		else
			$VERBOSE && echo "Unable to fetch."
			if [ -f "${STAGING_MIRRORLIST}" ]
			then
				rm -f ${STAGING_MIRRORLIST} 2>/dev/null
			fi
		fi
	done

	# Test each mirror and order by the fastest.
	for INSTANCE in $(cat ${STAGING_MIRRORLIST})
	do
		$VERBOSE && echo "Testing: ${INSTANCE}"
		INSTANCE_HASH_FN=$(uuidgen)
		INSTANCE_URL="https://${INSTANCE}/${SYNC_FILE}"
		if AVG_SPEED=$(curl -qfsS -H 'Cache-Control: no-cache' ${CURL_OPTS} -w '%{speed_download}' -o /tmp/${INSTANCE_HASH_FN} --url "${INSTANCE_URL}" 2>/dev/null)
		then
			if [ $? = 0 ]
			then
				INSTANCE_HASH=$(cat /tmp/${INSTANCE_HASH_FN})
				$VERBOSE && echo "Got hash: ${INSTANCE_HASH}"
				if [ "${PRIMARY_HASH}" = "${INSTANCE_HASH}" ]
				then
					$VERBOSE && echo "Hash OK. Adding ${INSTANCE} @ ${AVG_SPEED}"
					ACTIVE_MIRRORS+=("${AVG_SPEED} ${INSTANCE}")
				fi
			fi
		fi
		rm -f /tmp/${INSTANCE_HASH_FN} 2>/dev/null
	done

	if [ -f "${LATEST_MIRRORLIST}" ]
	then
		rm -f ${LATEST_MIRRORLIST} 2>/dev/null
	fi

	FASTEST_MIRRORS=$(printf '%s\n' "${ACTIVE_MIRRORS[@]}" | sort -n)
	for SORTED_MIRROR in ${FASTEST_MIRRORS[*]}
	do
		if [[ ! ${SORTED_MIRROR} =~ ^[0-9]+$ ]]
		then
			$VERBOSE && echo "Add mirror: ${SORTED_MIRROR}"
			echo ${SORTED_MIRROR} >>${LATEST_MIRRORLIST}
		fi
	done
	rm -f ${STAGING_MIRRORLIST} 2>/dev/null
}

declare -a MIRROR_LIST

### Grab the latest mirror list available, or fall back to the default array.
if [ -f "${LATEST_MIRRORLIST}" ]
then
	$VERBOSE && echo "Loading latest mirror list."
	readarray -t MIRROR_LIST < ${LATEST_MIRRORLIST}
else
	$VERBOSE && echo "Loading default mirror list."
	MIRROR_LIST=("${DEFAULT_MIRRORS[@]}")
fi

case ${1} in
	list)
		### Just a simple list
		printf '%s\n' "${MIRROR_LIST[@]}"
	;;
	random)
		### Randomize the mirror list output
		printf '%s\n' "${MIRROR_LIST[@]}" | sort -R
	;;
	refresh)
		### Fetch the latest mirror list from an official SteamFork mirror
		refresh_mirrors
	;;
	*)
		### Get the first entry in the mirror list
		printf '%s\n' "${MIRROR_LIST[0]}"
	;;
esac
