#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2024 SteamFork (https://github.com/SteamFork)

# Source predefined functions and variables
. /etc/profile

### Enable logging
case $(steamfork-get-setting system.loglevel) in
	verbose)
		VERBOSE=true
		;;
	debug)
		VERBOSE=true
		DEBUG=true
		;;
	*)
		VERBOSE=false
		DEBUG=false
		;;
esac

function silent_init() {
	$VERBOSE && echo "Initializing audio silently."
	aplay /usr/share/sounds/silent.wav >/dev/null 2>&1
}

### Watch for events.
/usr/bin/sudo /usr/bin/udevadm trigger && /usr/bin/udevadm monitor -s drm -s sound -s bluetooth 2>/dev/null |  while read LINE
do
	unset AUDIO_PROFILE
	unset HDMI_DEVICE HDMI_STATE OUTPUT_ENABLED HDMI_SINK WP_SINK
	unset USB_CARD_ID USB_CARD_SINK
	unset BLUETOOTH_CONNECTED BT_CARD_ID BT_CARD_SINK

	CARD="$(echo ${LINE} | awk '{print $4}')"
	CARD="$(echo ${CARD} | awk 'BEGIN {FS="/"} {print $NF}')"
	if [[ "${CARD}" =~ card[0-9]$ ]] || \
	   [[ "${CARD}" =~ hci[0-9]: ]]
	then
		$VERBOSE && echo "Incoming event on ${CARD}."
		AUDIO_PROFILE=$(steamfork-get-setting audio.profile)

		### Don't do anything if audio is not initialized.
		while true
		do
			CURRENT_SINK=$(pactl get-default-sink)
			$VERBOSE && echo "Current Sink: ${CURRENT_SINK}"
			if [ ! "${CURRENT_SINK}" = "auto_null" ]
			then
				break
			fi
			sleep .1
		done

		### Clear the default sink.
		$VERBOSE && echo "Cleared default sink."
		wpctl clear-default

		### Connect bluetooth devices (Priority 1)
		for BT_DEVICE in $(bluetoothctl devices Connected 2>/dev/null | awk '{print $2}')
		do
			IS_AUDIO=$(bluetoothctl info ${BT_DEVICE} 2>/dev/null | grep "Audio Sink")
			if [ -n "${IS_AUDIO}" ]
			then
				$VERBOSE && echo "Bluetooth: ${BT_DEVICE} has an audio sink."
				break
			else
				$VERBOSE && echo "Bluetooth: ${BT_DEVICE} has no audio sink."
				continue
			fi
		done
		if [ -n "${IS_AUDIO}" ]
		then
			for CONNECT_TIMER in $(seq 1 1 10)
			do
				BT_CARD_ID=$(pactl list short cards | awk '/bluez/ {print $1; exit}')
				BT_CARD_SINK=$(pactl list short sinks | awk '/bluez/ {print $2; exit}')
				if [ -n "${BT_CARD_SINK}" ]
				then
					CURRENT_SINK=$(pactl get-default-sink)
					if [ ! "${BT_CARD_SINK}" == "${CURRENT_SINK}" ]
					then
						$VERBOSE && echo "Bluetooth: Set default sink to ${BT_CARD_SINK} (USB)."
						pactl set-default-sink ${BT_CARD_SINK}
						pactl set-default-source ${BT_CARD_SINK}.monitor
						if [ -n "${AUDIO_PROFILE}" ]
						then
							$VERBOSE && echo "Bluetooth: Set ${BT_CARD_ID} to ${AUDIO_PROFILE}."
							pactl set-card-profile ${BT_CARD_ID} ${AUDIO_PROFILE}
						fi
						silent_init
						continue
					else
						${VERBOSE} && echo "Bluetooth: ${BT_CARD_SINK} already connected."
						continue
					fi
				else
					${VERBOSE} && echo "Bluetooth: Waiting for sink (${BT_DEVICE})."
					sleep .5
					continue
				fi
				sleep .1
			done
		fi

		### Trap USB devices and re-attach them when HDMI/DP is disconnected (Priority 2)
		USB_CARD_ID=$(pactl list short cards | awk '/usb/ {print $1; exit}')
		USB_CARD_SINK=$(pactl list short sinks | awk '/usb/ {print $2; exit}')
		if [ -n "${USB_CARD_SINK}" ]
		then
			CURRENT_SINK=$(pactl get-default-sink)
			if [ ! "${USB_CARD_SINK}" == "${CURRENT_SINK}" ]
			then
				$VERBOSE && echo "USB Audio: Set default sink to ${USB_CARD_SINK} (USB)."
				pactl set-default-sink ${USB_CARD_SINK}
				pactl set-default-source ${USB_CARD_SINK}.monitor
				if [ -n "${AUDIO_PROFILE}" ]
				then
					$VERBOSE && echo "USB Audio: Set ${USB_CARD_ID} to ${AUDIO_PROFILE}."
					pactl set-card-profile ${USB_CARD_ID} ${AUDIO_PROFILE}
				fi
				silent_init
				continue
			else
				${VERBOSE} && echo "USB Audio: ${USB_CARD_SINK} already connected."
				continue
			fi
		fi

		PRIORITY_DEVICES=$(pactl list short cards | awk '/usb|bluez/ {print $2; exit}')
		if [ -z "${PRIORITY_DEVICES}" ]
		then
			for CONNECT_TIMER in $(seq 1 1 10)
			do
	                	HDMI_CARD_ID=$(pactl list short cards | awk '/hdmi|dp/ {print $1; exit}')
        	        	HDMI_CARD_SINK=$(pactl list short sinks | awk '/hdmi|dp/ {print $2; exit}')
                		if [ -n "${HDMI_CARD_SINK}" ]
                		then
					CURRENT_SINK=$(pactl get-default-sink)
                		        if [ ! "${HDMI_CARD_SINK}" == "${CURRENT_SINK}" ]
                		        then
                		                $VERBOSE && echo "HDMI/DP: Set default sink to ${HDMI_CARD_SINK} (USB)."
                		                pactl set-default-sink ${HDMI_CARD_SINK}
                		                if [ -n "${AUDIO_PROFILE}" ]
                		                then
                		                        $VERBOSE && echo "HDMI/DP: Set ${HDMI_CARD_ID} to ${AUDIO_PROFILE}."
                		                        pactl set-card-profile ${HDMI_CARD_ID} ${AUDIO_PROFILE}
                		                fi
                		                silent_init
                		                continue
                		        else
                		                ${VERBOSE} && echo "HDMI/DP: ${HDMI_CARD_SINK} already connected."
                		                continue
                		        fi
				else
					${VERBOSE} && echo "HDMI/DP: Waiting for sink (${CARD})."
					sleep .5
					continue
                		fi
				sleep .1
			done
		else
			${VERBOSE} && echo "HDMI/DP: A higher priority device is already connected (${PRIORITY_DEVICES})."
		fi
	fi
done
