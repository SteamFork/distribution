#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2024 Fewtarius

# Example log schema:
# <IP Address> - - [<Date>:<Time> <Timezone>] "<HTTP Method> <Request Path> <Protocol>" <Status Code> <Response Size> "<Referrer>" "<User-Agent>"
# Example:
# 127.0.0.1 - - [01/Apr/2025:06:59:27 +0000] "GET /images/installer/steamfork-rel-latest-x86_64.iso HTTP/1.1" 206 2097152 "-" "AndroidDownloadManager/15 (Linux; U; Android 15; AGT-AN00 Build/HONORAGT-AN00)"

if [ -f "${HOME}/.SteamFork/options" ]; then
    source ${HOME}/.SteamFork/options
else
    echo "Please configure ${HOME}/.SteamFork/options before using this script."
    exit 1
fi

for KEY in WEB_HOSTS LOG_PATH; do
    if [ -z "${!KEY}" ]; then
        echo "Export ${KEY} before using this script."
        exit 1
    fi
done

declare -a BRANCHES=("rel" "testing" "stable")

# Parse command-line arguments
TEMP_DIR=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        --source)
            TEMP_DIR="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Use a temporary directory if --source is not provided
if [ -z "${TEMP_DIR}" ]; then
    TEMP_DIR=$(mktemp -d)
fi

function total_count() {
    DATA=${1}
    START_DATE=${2}
    END_DATE=${3}
    if [ -z "${DATA}" ]; then
        DATA="latest_${BRANCH}.releasemeta"
    fi

    find "${TEMP_DIR}" -type f -name "access*" -exec zgrep -a -h "${DATA}" {} + | \
        awk -v start_date="${START_DATE}" -v end_date="${END_DATE}" '
            BEGIN {
                # Convert start_date and end_date to YYYYMMDD for comparison
                split(start_date, sd, "/");
                split(end_date, ed, "/");
                month_map["Jan"] = "01"; month_map["Feb"] = "02"; month_map["Mar"] = "03";
                month_map["Apr"] = "04"; month_map["May"] = "05"; month_map["Jun"] = "06";
                month_map["Jul"] = "07"; month_map["Aug"] = "08"; month_map["Sep"] = "09";
                month_map["Oct"] = "10"; month_map["Nov"] = "11"; month_map["Dec"] = "12";
                start_date_numeric = sd[3] month_map[sd[2]] sd[1];
                end_date_numeric = ed[3] month_map[ed[2]] ed[1];
            }
            {
                # Extract the date and requested file from the log entry
                match($0, /\[([0-9]{2})\/([A-Za-z]{3})\/([0-9]{4}):/, date_match);
                match($0, /GET ([^ ]+)/, file_match);

                if (date_match[1] != "" && date_match[2] != "" && date_match[3] != "" && file_match[1] != "") {
                    # Convert log date to YYYYMMDD for comparison
                    day = date_match[1];
                    month = date_match[2];
                    year = date_match[3];
                    log_date_numeric = year month_map[month] day;

                    file = file_match[1];
                    ip = $1;

                    # Check if the log date is within the valid date range
                    if (log_date_numeric >= start_date_numeric && log_date_numeric <= end_date_numeric) {
                        unique_requests[ip ":" file] = 1;
                    }
                }
            }
            END {
                # Count unique requests
                print length(unique_requests);
            }'
}

# Temporary file to store the output
OUTPUT_FILE=$(mktemp)

# Print the header
echo "Branch,Biweekly Metadata Downloads,Biweekly ISO Downloads,Biweekly Update Downloads,Weekly Metadata Downloads,Weekly ISO Downloads,Weekly Update Downloads" > "${OUTPUT_FILE}"

# Iterate over branches in the correct order
for BRANCH in "${BRANCHES[@]}"; do
    WEEK_START=$(date -d "7 days ago" +"%d/%b/%Y")
    BIWEEK_START=$(date -d "14 days ago" +"%d/%b/%Y")
    TODAY=$(date -d "yesterday" +"%d/%b/%Y")

    METADATA_COUNT_WEEKLY=$(total_count "latest_${BRANCH}.releasemeta" "${WEEK_START}" "${TODAY}")
    ISO_DOWNLOADS_WEEKLY=$(total_count "steamfork-${BRANCH}-.*\.iso" "${WEEK_START}" "${TODAY}")
    UPDATE_DOWNLOADS_WEEKLY=$(total_count "steamfork_${BRANCH}_.*\.img.zst" "${WEEK_START}" "${TODAY}")

    METADATA_COUNT_BIWEEKLY=$(total_count "latest_${BRANCH}.releasemeta" "${BIWEEK_START}" "${TODAY}")
    ISO_DOWNLOADS_BIWEEKLY=$(total_count "steamfork-${BRANCH}-.*\.iso" "${BIWEEK_START}" "${TODAY}")
    UPDATE_DOWNLOADS_BIWEEKLY=$(total_count "steamfork_${BRANCH}_.*\.img.zst" "${BIWEEK_START}" "${TODAY}")

    printf "%s,%d,%d,%d,%d,%d,%d\n" \
        "${BRANCH}" \
        "${METADATA_COUNT_BIWEEKLY}" "${ISO_DOWNLOADS_BIWEEKLY}" "${UPDATE_DOWNLOADS_BIWEEKLY}" \
        "${METADATA_COUNT_WEEKLY}" "${ISO_DOWNLOADS_WEEKLY}" "${UPDATE_DOWNLOADS_WEEKLY}" >> "${OUTPUT_FILE}"
done

# Print the output
cat "${OUTPUT_FILE}"

# Clean up temporary files
rm -f "${OUTPUT_FILE}"