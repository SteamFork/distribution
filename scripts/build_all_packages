#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2025 SteamFork (https://github.com/SteamFork)

# Log function for consistent output
log() {
  local msg="$1"
  echo "$(date +'%Y-%m-%d %H:%M:%S') - ${msg}"
}

# Source the environment variables from the Makefile
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MAKEFILE_PATH="${SCRIPT_DIR}/../Makefile"
eval $(make -s -f "${MAKEFILE_PATH}" env)

# Refresh the GPG key periodically
refresh_gpg_key_periodically() {
    while true; do
        gpg --batch --yes --pinentry-mode loopback --list-keys > /dev/null
        sleep 1800  # Refresh every 30 minutes
    done
}

# Start the GPG key refresh in the background
refresh_gpg_key_periodically &

PACKAGES_LIST="${SCRIPT_DIR}/../metadata/packages.list"

# Function to check disk space
check_disk_space() {
    local available_space=$(df --output=avail / | tail -n 1)
    if (( available_space < 1048576 )); then  # Less than 1GB available
        log "Error: Not enough disk space available. Exiting."
        exit 1
    fi
}

# Read the packages list and build each package with dependencies
while IFS= read -r line; do
    check_disk_space
    if [ $? -ne 0 ]; then
        log "Error: Not enough disk space available. Exiting."
        exit 1
    fi

    if [[ "$line" == local:* ]]; then
        PKG="${line#local:}"
        REPO_FLAG="local"
    elif [[ "$line" == aur:* ]]; then
        PKG="${line#aur:}"
        REPO_FLAG="aur"
    else
        log "Unknown package type: $line"
        continue
    fi

    log "Clearing pacman cache..."
    yes | sudo pacman -Scc
    if [ $? -ne 0 ]; then
        log "Error: Failed to clear pacman cache."
        exit 1
    fi

    log "Building package: $PKG (repo: $REPO_FLAG)"
    "${SCRIPT_DIR}/build_package" --repo ${REPO_FLAG} "$PKG"
    if [ $? -ne 0 ]; then
        log "Error: Failed to build package $PKG. Exiting."
        exit 1
    fi

    log "Successfully built package: $PKG"
done < "$PACKAGES_LIST"

log "All packages built successfully."
