#!/bin/bash

set -e

die() { echo >&2 "!! $*"; exit 1; }

# File this script will modify
STEAMOS_CONF_FILE="/etc/sddm.conf.d/steamos.conf"
CONF_FILE="/etc/sddm.conf.d/zz-steamos-autologin.conf"
DEFAULT_SESSION="gamescope-wayland.desktop"

if [ -e "/tmp/steamos-session-select.user" ]
then
	CURRENT_USER="$(cat /tmp/steamos-session-select.user)"
else
	echo "${USER}" >/tmp/steamos-session-select.user
fi

if [ -e "/etc/steamfork-default-session" ]
then
	DEFAULT_SESSION="$(cat /etc/steamfork-default-session)"
	AUTOLOGIN=false
elif [ ! ${1} ]
then
	DEFAULT_SESSION="gamescope"
	AUTOLOGIN=true
fi

SESSION="${1:-${DEFAULT_SESSION}}"
AUTOLOGIN="${AUTOLOGIN:-true}"
IN_CHROOT="${IN_CHROOT:-false}"

# Become root
if [[ $EUID != 0 && $IN_CHROOT == false ]]; then
  pkexec "$(realpath $0)" "${SESSION}" --sentinel-created
  # Quit existing sessions
  if [[ "$2" != "--no-restart" ]]; then
    systemctl --user --no-block stop gamescope-session.service
    systemctl --user --no-block stop plasma-workspace.target
  fi
  exit
fi

if [[ "$2" != "--sentinel-created" && $IN_CHROOT == false ]]; then
  die "Running $0 as root is not allowed"
fi

function create_steamos_conf() {
  DISPLAY_SESSION=${1}
  AUTOLOGIN=${2}
  CURRENT_USER=${3}
  cat <<EOF | tee "${STEAMOS_CONF_FILE}" >/dev/null 2>&1
# This file is managed by steamos-session-select
[General]
DisplayServer=wayland

[Autologin]
Relogin=${AUTOLOGIN}
Session=${DISPLAY_SESSION}
User=${CURRENT_USER}

[X11]
# Janky workaround for wayland sessions not stopping in sddm, kills
# all active sddm-helper sessions on teardown
DisplayStopCommand=/usr/bin/gamescope-wayland-teardown-workaround
EOF
}

function autologin() {
    if [ ! -f "${STEAMOS_CONF_FILE}" ]; then
    BOUNCE_SDDM=true
  fi
  create_steamos_conf "$1" "${AUTOLOGIN}" "${CURRENT_USER}"
  local SESSION_LAUNCHER="$1"
  if [ -e "${CONF_FILE}" ]; then
    rm -f "${CONF_FILE}"
  fi
  if [ "${BOUNCE_SDDM}" = true ]; then
    echo "Restarting sddm to apply changes..."
    systemctl restart sddm
  fi
  echo "Autologin configured for session ${SESSION_LAUNCHER}"
}

function configure_rotation() {
  local ROTATION="$1"
  local TOUCH_MATRIX=""

  case "${ROTATION}" in
    left)
      TOUCH_MATRIX="0 -1 1 1 0 0 0 0 1"
      ;;
    right)
      TOUCH_MATRIX="0 1 0 -1 0 1 0 0 1"
      ;;
    normal)
      TOUCH_MATRIX="1 0 0 0 1 0 0 0 1"
      ;;
    inverted)
      TOUCH_MATRIX="-1 0 1 0 -1 1 0 0 1"
      ;;
      esac
if [ -n "${TOUCH_MATRIX}" ]; then
    echo "Setting touchscreen rotation to ${ROTATION} (${TOUCH_MATRIX})"
  cat <<EOF | tee /etc/X11/xorg.conf.d/99-touchscreen_orientation.conf >/dev/null
Section "InputClass"
  Identifier "Coordinate Transformation Matrix"
  MatchIsTouchscreen "on"
  MatchDevicePath "/dev/input/event*"
  MatchDriver "libinput"
  Option "CalibrationMatrix" "${TOUCH_MATRIX}"
EndSection
EOF
fi
}

case "${SESSION}" in
  plasma-wayland-persistent)
    autologin "plasma.desktop"
    ;;
  plasma-x11-persistent)
    autologin "plasmax11.desktop"
    ;;
  plasma*)
    autologin "plasma-steamos-wayland-oneshot.desktop"
    ;;
  gamescope)
    autologin "gamescope-wayland.desktop"
    ;;
  *)
    echo >&2 "!! Unrecognized session '${SESSION}'"
    exit 1
    ;;
esac

if [ ! "${DEFAULT_SESSION}" = "gamescope" ]
then
    cat <<EOF | tee /etc/sddm.conf.d/001-rotation.conf >/dev/null 2>&1
[XDisplay]
DisplayCommand=/etc/X11/Xsession.d/999rotate-screen
EOF
    configure_rotation "${X11_ROTATION}"
fi

rm -f /tmp/steamos-session-select.user
